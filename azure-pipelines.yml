# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  stageBuildConfiguration: '$(StageBuildConfig)'
  productionBuildConfiguration: '$(ProductionBuildConfig)'

steps:
# Checkout the repository to make sure the files (including package.json) are available
- checkout: self
  fetchDepth: 1
  displayName: 'Checkout Repository'

# Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

# Use npm ci for faster and deterministic installs
- script: |
    npm ci
  displayName: 'npm ci'
  workingDirectory: $(Build.SourcesDirectory)  # Ensure it runs from the correct directory

# Run tests
- script: |
    npm run test-ci
  displayName: 'npm run test-ci'

# Build for staging configuration
- script: |
    npm run "$(stageBuildConfiguration)"
  displayName: 'npm run optimized $(stageBuildConfiguration)'

# Cache node_modules for staging build (Optional optimization)
- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.npm
  displayName: 'Cache node_modules for staging'

# Publish build artifacts for staging
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory) for Staging'
  inputs:
    contents: '**/build/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Staging Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'stage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

# Build for production configuration
- script: |
    npm run "$(productionBuildConfiguration)"
  displayName: 'npm run optimized $(productionBuildConfiguration)'

# Cache node_modules for production build (Optional optimization)
- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.npm
  displayName: 'Cache node_modules for production'

# Publish build artifacts for production
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory) for Production'
  inputs:
    contents: '**/build/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Production Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'production'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
