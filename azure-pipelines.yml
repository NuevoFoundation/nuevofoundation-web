# Node.js with React
# Build a Node.js project that uses React.
# Updated to Node.js 22.x for TypeScript 5.x and modern dependency compatibility
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  stageBuildConfiguration: '$(StageBuildConfig)'
  productionBuildConfiguration: '$(ProductionBuildConfig)'

jobs:
- job: Build
  displayName: 'Shipping happiness to the world!'  # Updated description
  steps:
  - script: |
      echo "Nuevo Foundation"
      echo "                                            @@@%%%%%%%%@@@                                          "
      echo "                                          @%*:..........:*@@                                        "
      echo "                                        @%-..            ..-%@                                      "
      echo "                                       @%++++++++++++++:.   .*@                                     "
      echo "                        @@@@@@@@@@@@@@@#===============-:::::-%@@@@@@@@@@@@                         "
      echo "                       %#-------------------------------------------------#@                       "
      echo "                       %+                                                .*@                        "
      echo "                       %+                                                .*@                        "
      echo "                       %+ .:------------------------------------------:. .*@                        "
      echo "                      @%+ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*@@                       "
      echo "                    @%**+ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*-=#%                     "
      echo "                   @%:.++ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*=#:=%                    "
      echo "                   @-.=++ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*=#:.-@                   "
      echo "                  @%.:#++ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*=#:..%@                  "
      echo "                   @.:#++ :%@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@%- .*=#:..%                   "
      echo "                   @*:#++ :%@@@@#==+@@@@@@@@@@@@@@@@@@@@@@@@@@%==+@@@@%- .*=#:.#@                   "
      echo "                    @##++ :%@@@@*===%@@@@@@@@@@@@@@@@@@@@@@@@@*==+%@@@%- .*=#+#@                    "
      echo "                     @%#+ :%@@@@#===%@@@@@@@@@@@@@@@@@@@@@@@@@#==+@@@@%- .*#%@@                     "
      echo "                       %+ :%@@@@@#*%@@@@@@@@@@@@@@@@@@@@@@@@@@@#*%@@@@%- .*@                         "
      echo "                       %+ :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%- .*@                         "
      echo "                       %+ .+##########################################+: .*@                         "
      echo "                       %+.................................................*@                         "
      echo "                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                         "
    displayName: 'Nuvi enters the chat'

  - task: NodeTool@0
    inputs:
      versionSpec: '22.x'
    displayName: 'Install Node.js'

  - task: Cache@2
    displayName: 'Cache npm dependencies'
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: ~/.npm

  - script: |
      npm ci --legacy-peer-deps
    displayName: 'npm ci (clean install)'

  #- script : | 
  #    ./node_modules/.bin/eslint src/**/*.{ts,tsx}
  #  displayName: 'run eslint'

  - script: |
      npm run test-ci
    displayName: 'npm run test-ci'

  - script: |
      npm run "$(stageBuildConfiguration)"
    displayName: 'npm run optimized $(stageBuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: '**/build/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true 
      overWrite: true 
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

  - task: PublishBuildArtifacts@1
    displayName: 'Publish src to: $(Build.ArtifactStagingDirectory)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'stage' 
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

  - script: |
      npm run "$(productionBuildConfiguration)"
    displayName: 'npm run optimized $(productionBuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      contents: '**/build/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true 
      overWrite: true
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

  - task: PublishBuildArtifacts@1
    displayName: 'Publish src to: $(Build.ArtifactStagingDirectory)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'production' 
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
