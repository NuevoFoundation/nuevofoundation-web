# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  stageBuildConfiguration: '$(StageBuildConfig)'
  productionBuildConfiguration: '$(ProductionBuildConfig)'

steps:
# Use a cached Node.js installation to speed up build times
- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

# Use npm ci instead of npm install for faster and deterministic installs
- script: |
    npm ci
  displayName: 'npm ci'

# Optionally, you can run eslint here if it's part of your CI process
# - script : | 
#    ./node_modules/.bin/eslint src/**/*.{ts,tsx}
#  displayName: 'run eslint'

# Run tests
- script: |
    npm run test-ci
  displayName: 'npm run test-ci'

# Run optimized build for staging
- script: |
    npm run "$(stageBuildConfiguration)"
  displayName: 'npm run optimized $(stageBuildConfiguration)'

# Cache node_modules to speed up the next build
- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.npm
  displayName: 'Cache node_modules'

# Parallelize the build steps for staging and production
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory) (Staging)'
  inputs:
    contents: '**/build/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publish src to: $(Build.ArtifactStagingDirectory) (Staging)'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'stage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

# Run optimized build for production
- script: |
    npm run "$(productionBuildConfiguration)"
  displayName: 'npm run optimized $(productionBuildConfiguration)'

# Cache node_modules for production build to speed up subsequent runs
- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.npm
  displayName: 'Cache node_modules (Production)'

# Parallelize copying files for production
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory) (Production)'
  inputs:
    contents: '**/build/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publish src to: $(Build.ArtifactStagingDirectory) (Production)'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'production'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

# Shallow clone to reduce checkout time
- checkout: self
  fetchDepth: 1
  displayName: 'Shallow Clone Repository'
